#!/usr/bin/env node

var app      = require('http').createServer(handler),
    fs       = require('fs'),
    mapper  = require('../lib/mapper.js');

function handler(req, res) {

  // get the query object
  var query = require('url').parse(req.url, true).query;

  switch(req.url) {
    case '/':
      displayPage('/../static/index.html', 'text/html');
      break;
    case '/compress-maps/':
      compressMaps();
      break;
    case '/supported-sites/':
      displayPage('/../static/supported-sites.html', 'text/html');
      break;
    case '/css/':
      displayPage('/../sprites/icons.css', 'text/css');
      break;
    case '/css/icons.png':
      displayPage('/../sprites/icons.png', 'image/png');
      break;
    case '/maps/':
      displayWrappedJSON('/../lib/mapdata.min.json', 'var mapdata =');
      break;
    default:
      processAPICall();
  }




  function processAPICall(){
    var options = {};
    if(query.format)
      options.format = query.format;

    
    if(query.urls){
      mapper.parseUrls(query.urls, function(data){
        writeContent(data, query.callback);
      });
    }else if(query.sgns){
      mapper.parseSgns(query.sgns, function(data){
        writeContent(data, query.callback);
      });
    }else if(query.json){
      var json = JSON.parse(query.json)
      mapper.parseElsewhereJson(json, function(data){
        writeContent(data, query.callback);
      });
    }else if(query.sites){
      mapper.supportedSites(function(data){
        writeContent(data, query.callback);
      });
    }else{
      writeContent({}, query.callback);
    }

    function writeContent(json,callback){
      var str = JSON.stringify(json);
      res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});
      if (callback) {
        res.end(callback + '(' + str + ')');
      } else {
        res.end(str);
      }
    }


  }



  function displayPage(path, mimeType){
    res.writeHead(200, {'Content-Type': mimeType});
    fs.readFile(__dirname + path, function (err, page) {
      if (err) throw err;
      res.end(page);
    });
    return;
  };

  function displayWrappedJSON(path, start){
    res.writeHead(200, {'Content-Type': 'application/json'});
    fs.readFile(__dirname + path, function (err, page) {
      if (err) throw err;
      res.write(start);
      res.end(page);
    });
    return;
  };



  function compressMaps(){
    
    var fileNames = [];
    var parts = [];

    EventEmitter = require('events').EventEmitter,
    filesEvt = new EventEmitter(),

    filesEvt.on('files_ready',function(){
      console.log('done');
      writeMapData('[' + parts.join() + ']');
      res.writeHead(200, {'Content-Type': 'text/html'});
      res.end('done');
    return;
    });

    fs.readdir( __dirname + '/../maps/', function( err, files) {
      files.forEach(function(file){

        console.log('File: ' + file);
        if(file.indexOf('.js') > -1 || file.indexOf('.json') > -1){
          fileNames.push(__dirname + '/../maps/' + file)
          var data = fs.readFileSync(__dirname + '/../maps/' + file, 'utf8') 
          parts.push(data);
          console.log(data);
        }
        console.log('------------------------');
        
      });
      filesEvt.emit('files_ready');
    });
  };




  function writeMapData(content){
    var compressor = require('node-minify');
    fs.writeFile(__dirname + '/../lib/mapdata.json', content, 'utf8', function(err) {
        if(err) {
          console.log(err);
        } else {
          console.log('The file: mapdata.json was saved');

          new compressor.minify({
              type: 'uglifyjs',
              fileIn: __dirname + '/../lib/mapdata.json',
              fileOut: __dirname + '/../lib/mapdata.min.json',
              callback: function(err){
                  console.log(err);
              }
          });
        }
      }); 
  }


}

app.listen(process.env.PORT || 8881, 'localhost');
console.log('App @ http://localhost:' + 8881);

